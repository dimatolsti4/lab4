#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <ctime>
 
using namespace std;
 
typedef struct node {
    int val;
    struct node *l;
    struct node *r;
    int h;
} node;
  
int h(node *n) {
    if (n == NULL)
        return 0;
    return n->h;
}
  
int max(int a, int b) {
    return (a > b)? a : b;
}
 
node *newNode(int val) {
    node* n = (node*)malloc(sizeof(node));
    n->val = val;
    n->l   = NULL;
    n->r   = NULL;
    n->h   = 1;
    return(n);
}
 
node *rRotate(node *y) {
    node *x = y->l;
    node *T2 = x->r;
  
    x->r = y;
    y->l = T2;
  
    y->h = max(h(y->l), h(y->r))+1;
    x->h = max(h(x->l), h(x->r))+1;
  
    return x;
}
 
node *lRotate(node *n) {
    node *tmp = n->r;
    node *l_sub = tmp->l;
 
    tmp->l = n;
    n->r = l_sub;
  
    n->h = max(h(n->l), h(n->r))+1;
    tmp->h = max(h(tmp->l), h(tmp->r))+1;
  
    return tmp;
}
 
int getBalance(node *N) {
    if (N == NULL)
        return 0;
    return h(N->l) - h(N->r);
}
 
node *makeBalance(node *root) {
    if (root == NULL) return root;
    
    root->h = 1 + max(h(root->l), h(root->r));
 
    int balance = getBalance(root);
 
    if (balance > 1 && getBalance(root->l) >= 0)
        return rRotate(root);
 
    if (balance > 1 && getBalance(root->l) < 0)
    {
        root->l =  lRotate(root->l);
        return rRotate(root);
    }
 
    if (balance < -1 && getBalance(root->r) <= 0)
        return lRotate(root);
 
    if (balance < -1 && getBalance(root->r) > 0)
    {
        root->r = rRotate(root->r);
        return lRotate(root);
    }
  
    return root;
}
 
node *insert(node* node, int val) {
    if (node == NULL) return newNode(val);
  
    if (val < node->val)
        node->l = insert(node->l, val);
    else if (val > node->val)
        node->r = insert(node->r, val);
    else 
        return node;
  
    return makeBalance(node);
}
 
node *minValueNode(node* n)
{
    node* current = n;
    while (current->l != NULL)
        current = current->l;
  
    return current;
}
 
 
 
node *deleteNode(node* root, int val)
{
    if (root == NULL)return root;
 
    if ( val < root->val )
        root->l = deleteNode(root->l, val);
    else if( val > root->val )
        root->r = deleteNode(root->r, val);
    else
    {
        if( (root->l == NULL) || (root->r == NULL) )
        {
            node *temp = root->l != NULL ? root->l : root->r;
  
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else {
                *root = *temp;
            }
            free(temp);
        }
        else
        {
            node* temp = minValueNode(root->r);
            root->val = temp->val;
            root->r = deleteNode(root->r, temp->val);
        }
    }
    
    return makeBalance(root);
}
 
node *searchNode(int val, node *root) {
    if(root) 
    {
        if (val > root->val) 
        {
            return searchNode(val, root->r);
        } else if (val < root->val) 
        {
            return searchNode(val, root->l);
        } else 
        { 
            return root;
        }
    } 
    else 
    {
        return NULL;
    }
}
 
void preOrder(node *root)
{
    if(root != NULL)
    {
        cout << root->val << " ";
        preOrder(root->l);
        preOrder(root->r);
    }
}
 
int main()
{
    freopen("out.txt", "w", stdout);
    srand(time(NULL));
    for(int n = 0; n < 1001; ++n){
        node *root = NULL;
        unsigned int s =  clock();
        for(int i = 0; i < n; ++i)root = insert(root, rand()%10000);
        unsigned int e = clock();
        printf("%lf\n", (double)(e - s) / CLOCKS_PER_SEC*1000);
    }
    fclose (stdout);
    return 0;
}
